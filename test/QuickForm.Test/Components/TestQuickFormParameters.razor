@using QuickForm.Common
@inherits BaseTest

@code
{
    [SuppressMessage("ReSharper", "UnusedMember.Local")]
    private class Model
    {
        public string A { get; set; } = default!;
    }

    [Test]
    public void Test()
    {
        var model = new Model();

        var fieldCssClassProvider = new CustomQuickFormFieldCssClassProvider("editor", "label", "input");
        var validationCssClassProvider = new CustomValidationCssClassProvider(string.Empty, "valid", "invalid");

        var additionalAttributes = new Dictionary<string, object?> { { "attribute", "value" } };

        var submitted = false;
        var onSubmit = () => { submitted = true; };

        var changed = false;
        var onChange = () => { changed = true; };

        var cut = Render(
            @<text>
                <QuickForm TEntity="Model" Model="model"
                           FormClass="form-class"
                           FieldCssClassProvider="fieldCssClassProvider"
                           ValidationCssClassProvider="validationCssClassProvider"
                           OnSubmit="@onSubmit"
                           OnModelChanged="@onChange"
                           AdditionalAttributes="additionalAttributes">
                    <SubmitButtonTemplate>
                        <button type="submit"></button>
                    </SubmitButtonTemplate>
                </QuickForm>
             </text>);

        // assert not passing the model throws something idk
        Assert.Throws<ArgumentNullException>(() =>
        {
            Render(
                @<text>
                    <QuickForm TEntity="Model"/>
                 </text>);
        });

        // assert passing both model and edit context throws
        Assert.Throws<InvalidOperationException>(() =>
        {
            Render(
                @<text>
                    <QuickForm Model="model" EditContext="new EditContext(model)"/>
                 </text>);
        });

        // assert passing OnValidSubmit and OnInvalidSubmit along OnSubmit throws
        Assert.Throws<InvalidOperationException>(() =>
        {
            Render(
                @<text>
                    <QuickForm Model="model"
                               OnSubmit="@(() => { })"
                               OnValidSubmit="@(() => { })"
                               OnInvalidSubmit="@(() => { })"/>
                 </text>);
        });

        cut.MarkupMatches(
            @<text>
                <form class="form-class" attribute="value" novalidate>
                    <div class="editor">
                        <label for:ignoreCase:regex="@IdRegex" class="label" diff:ignoreChildren></label>
                        <input id:ignoreCase:regex="@IdRegex" autofocus class="input"/>
                    </div>
                    <button type="submit"></button>
                </form>
             </text>);

        Print(cut);

        // act
        cut.Find(".input").Change(string.Empty);
        cut.Find("button").Click();

        cut.MarkupMatches(
            @<text>
                <form class="form-class" attribute="value" novalidate>
                    <div class="editor">
                        <label for:ignoreCase:regex="@IdRegex" class="label" diff:ignoreChildren></label>
                        <input id:ignoreCase:regex="@IdRegex" autofocus class="input valid" value=""/>
                    </div>
                    <button type="submit"></button>
                </form>
             </text>);

        Print(cut);

        Assert.That(changed, Is.True);
        Assert.That(submitted, Is.True);
    }
}