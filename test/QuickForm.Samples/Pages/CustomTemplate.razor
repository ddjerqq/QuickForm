@page "/custom_template"

@using QuickForm.Components
@using QuickForm.Attributes
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using QuickForm.Common

<PageTitle>Index</PageTitle>

<div class="text"></div>

<QuickForm @ref="Form" TEntity="LoginCommand"
           Model="Model" EditContext="EditContext"
           FormClass="form w-50 mx-auto"
           FieldCssClassProvider="CustomQuickFormFieldCssClassProvider"
           OnSubmit="@OnSubmit" novalidate>
    <DescriptionTemplate>
        <div class="fs-6 form-text text-muted">
            @context
        </div>
    </DescriptionTemplate>

    <ValidFeedbackTemplate>
        <div class="valid-feedback fw-bold">
            @context
        </div>
    </ValidFeedbackTemplate>

    <InValidFeedbackTemplate>
        <div class="invalid-feedback fw-bold">
            @context
        </div>
    </InValidFeedbackTemplate>

    <SubmitButtonTemplate>
        <button type="submit" class="btn btn-outline-success w-100">
            submit
        </button>
    </SubmitButtonTemplate>
</QuickForm>

@code {

    public QuickForm<LoginCommand> Form { get; set; } = default!;

    public LoginCommand Model { get; set; } = new();

    public CustomQuickFormFieldCssClassProvider CustomQuickFormFieldCssClassProvider { get; set; } = new("text-start mb-1 mb-md-3", "mb-1 fw-bold text-info", "form-control");

    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    public class LoginCommand
    {
        [Description("We will never share your email with anyone else.")]
        [Required(ErrorMessage = "Email is required.")]
        [Placeholder("Enter your email.")]
        [DataType(DataType.EmailAddress)]
        public string Email { get; set; } = string.Empty;

        [Description("Enter your password.")]
        [Required(ErrorMessage = "Password is required.")]
        [Placeholder("Enter your password.")]
        [MinLength(3)]
        [MaxLength(16)]
        public string Password { get; set; } = string.Empty;
    }

    public void OnSubmit()
    {
        Form.EditContext?.Validate();
        StateHasChanged();
    }

}